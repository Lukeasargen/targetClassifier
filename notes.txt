
best_model = copy.deepcopy(net.state_dict())

numbers to beat
orientation: unknown
shape: 95.5%
letter: 79.7%
shape_color: 99.0%
letter_color: 94.1%

resnet6
conv1 32 filters, blocks=2,2,2, filters=32,64,128, task head conv flatten
batch=256 16384 lr=1e-1 milestones=120,140 gamma=0.1 nepochs=150 l2=5e-4 momentum=0.9 nestrov=True
709907 params, 2.71MB
orientation: 91.69%
shape: 99.64%
letter: 90.13%
shape_color: 98.89%
letter_color: 94.51%

filters         blocks params size   final accuracy                                                final loss sum
16, 16, 32, 64  1,1,1  84723  0.32MB [78.86962891 96.57592773 53.52172852 97.27172852 85.16235352] 2.8541
16, 16, 32, 64  2,2,2  181939 0.69MB [86.41967773 98.81591797 76.3671875  97.8515625  89.64233398] 1.5326
16, 16, 32, 64  2,3,2  200499 0.76MB [86.85913086 99.12719727 78.58276367 97.81494141 90.10620117] 1.4183
32, 32, 64, 128 1,1,1  321939 1.23MB [88.65356445 99.25537109 83.41064453 98.46801758 92.54150391] 1.2128
32, 32, 64, 128 2,2,2  709907 2.71MB [91.68701172 99.63989258 91.07055664 98.77929688 94.44580078] 0.7324
32, 32, 64, 128 2,3,2  783891 2.99MB [92.52319336 99.82910156 91.04614258 98.84643555 94.2565918 ] 0.6979
32, 64, 64, 128 2,2,2  824979 3.15MB [92.85888672 99.90234375 93.46923828 99.02954102 95.5078125 ] 0.5733
32, 64, 64, 128 2,3,2  898693 3.43MB [93.32275391 99.86572266 94.16503906 99.0234375  95.72753906] 0.5375

resnet50_32x4d 64, 256, 512, 1024, 2048, 3,4,6,3 23150035 88.31MB
batch=256 16384 lr=1e-1 milestones=120,130 gamma=0.1 nepochs=140 l2=5e-4 momentum=0.9 nestrov=True
orientation: 94.55%
shape: 99.96%
letter: 92.93%
shape_color: 99.23%
letter_color: 96.23%

smallest target: 16px
human smallest target: 18px no rotation, 22px rotation


todo
-label weights, "Multi-Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics"
-class weights, some classes are more difficult
-model save after epochs

-visualize the metrics, confusion matrix, make jupyter notebook
    -by class, accuracy, precision, recall, specificty, f1 score, matthews coreelation coefficient, confusion matrix

-trainer class, holds the training state, can be saved and loaded for resuming training
-load saved model function


for visualizing final model outputs

mean , std = torch.tensor([0.485, 0.456, 0.406]),torch.tensor([0.229, 0.224, 0.225])
def denormalize(image):
  image = image.to("cpu").clone().detach()
  image = transforms.Normalize(-mean/std,1/std)(image) #denormalize
  image = image.permute(1,2,0) 
  image = torch.clamp(image,0,1)
  return image.numpy()

def visualize(image , actual , pred):
  fig,ax = plt.subplots()
  ax.imshow(denormalize(image))
  ax.grid(False)
  classes =  np.array(classLabels)[np.array(actual,dtype=np.bool)]
  for i , s in enumerate(classes):
    ax.text(0 , i*20  , s , verticalalignment='top', color="white", fontsize=16, weight='bold')
  
  classes =  np.array(classLabels)[np.array(pred,dtype=np.bool)]
  for i , s in enumerate(classes):
    ax.text(160 , i*20  , s , verticalalignment='top', color="black", fontsize=16, weight='bold')

  plt.show()

visualize(image[1] , label[1].tolist() , output[1].tolist())
